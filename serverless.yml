service: stasis

frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: python3.6
  region: us-west-2

  #required permissions
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.trackingTable}"
    - Effect: Allow
      Action:
        - SNS:*
      Resource: { "Fn::Join" : [":", ["arn:aws:sns:${self:custom.region}",  "*:*" ] ]  }

  memorySize: 128
  timeout: 90
  versionFunctions: false

  #where to store out data, needs to be manually created!
  deploymentBucket:
    name: lambdas-stasis

#custom configuration settings
custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}

  snsTopic: "StasisQueue-${self:custom.stage}"
  trackingTable: "StasisTrackingTable-${self:custom.stage}"


functions:
  #creates a new tracking record in the system
  trackingCreate:
    handler: stasis/tracking/create.create
    events:
      - http:
          path: stasis/tracking
          method: post
          cors: true

    #defines to which topic we want to connect
    environment:
      topic: ${self:custom.snsTopic}

  #fetches an existing tracking record from the system
  trackingGet:
    handler: stasis/tracking/get.get
    events:
      - http:
          path: stasis/tracking/{sample}
          method: get
          cors: true
          request:
            parameter:
              paths:
                sample: true

    #defines to which topic we want to connect
    environment:
      trackingTable: ${self:custom.trackingTable}


  #monitors our event queue for received messages and routes them
  route:
    handler: stasis/route/route.route
    events:
      - sns: ${self:custom.snsTopic}
    environment:
      trackingTable: ${self:custom.trackingTable}

resources:
  Resources:

    #creates our required tables
    TrackingTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S

        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.trackingTable}
