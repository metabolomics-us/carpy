service: cis

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-domain-manager
  - serverless-python-requirements
  - serverless-aws-documentation
provider:
  name: aws
  runtime: python3.7
  region: us-west-2

  # simple security based on stages and api keys
  # one fits all for production
  apiKeys:
    - "cis-${self:custom.stage}"

  tracing:
    lambda: true
    apiGateway: true

  #required permissions
  iamRoleStatements:
    - Effect: Allow
      Action:
        - iam:PassRole
      Resource: "*"

  memorySize: 128
  timeout: 30
  versionFunctions: false

  logRetentionInDays: 3

  #where to store out data, needs to be manually created!
  deploymentBucket:
    name: "lambdas-stasis"

  ##
  # defines all generated environment variables for lambdas
  environment:
    current_stage: ${self:custom.stage}
    carrot_database: carrot-${self:custom.stage}
    carrot_username: postgres
    carrot_password: Fiehnlab2020
    carrot_host: lc-binbase-dev.czbqhgrlaqbf.us-west-2.rds.amazonaws.com
    carrot_port: 5432


  ##
  # vpc settings
  vpc:
    securityGroupIds: ${self:custom.security}
    subnetIds: ${self:custom.subnets}


############################################################################################
#custom configuration settings
############################################################################################
custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}

  security:
    - 'sg-7d409b03'
  subnets:
    - 'subnet-e382339a'
    - 'subnet-04c0515e'
    - 'subnet-b779a9fc'
    - 'subnet-39f3df11'


  ###
  # custom domain management
  ###

  domains:
    prod: api.metabolomics.us
    test: test-api.metabolomics.us
    dev: dev-api.metabolomics.us
    splashone: splashone.metabolomics.us

  customDomain:
    basePath: "cis"
    domainName: ${self:custom.domains.${self:custom.stage}}
    stage: "${self:custom.stage}"
    createRoute53Record: true

  pythonRequirements:
    dockerizePip: true
    slim: false
    noDeploy:
      - "boto3"
      - "botocore"
      - "moto"
      - "pytest"

  ###
  # documentation (general)
  ###
  documentation:
    api:
      info:
        version: '1.0'
        title: CIS-Server API
        description: <h2>Specification for the current version of CIS lambdas exposed as REST services</h2>
#        termsOfService: AsIs
        contact:
          name: Fiehnlab IT Team
          url: https://fiehnlab.ucdavis.edu/staff#it
        license:
          name: CDDL-1.0
          url: https://opensource.org/licenses/CDDL-1.0
    models:
      - LibraryName:
        pattern: '^.* \| .* \| .* \| (?:positive|negative)$'
        example: 'lcms | QExcative | c18 | positive'
      - EmptyBody204:
        type: object
        properties:
          statusCode:
            type: integer
            default: 204
          body:
            nullable: true
      - EmptyBody400:
        type: object
        properties:
          statusCode:
            type: integer
            default: 400
          body:
            items:
              nullable: true
            default: []
      - Forbidden403:
        type: object
        properties:
          statusCode:
            type: integer
            default: 403
          body:
            type: object
            properties:
              message:
                type: string
      - EmptyBody404:
        type: object
        properties:
          statusCode:
            type: integer
            default: 404
          body:
            type: array
            items:
              nullable: true
            default: []
      - Error:
        type: object
        properties:
          statusCode:
            type: integer
          body:
            type: object
            properties:
              error:
                type: string
      - Splash:
        pattern: '^splash\d{2}-[0-9a-z]{4}-[0-9a-z]{10}-[0-9a-z]{20}$'
        example: 'splash10-001i-0900000000-e8f8990bb55851ffc9f1'
      - IonModes:
        enum:
          - positive
          - negative
      - SortableColumns:
        enum:
          - tgt_id
          - tgt_ri
          - pmz
          - name
          - adduct
        default: tgt_id
      - SortDirection:
        type: object
        properties:
          direction:
            description: Sort order
            default: asc
            enum:
              - asc
              - desc
      - AnnotationsList:
        type: object
        properties:
          splash:
            $ref: {{model: Splash}}
          total_count:
            description: Total number of annotations for this target
            type: integer
          annotations:
            description: List of annotations in the current page (defined by limit and offset).
            type: array
            items:
              $ref: {{model: AnnotationObj}}
      - AnnotationObj:
        type: object
        description: Annotation object
        properties:
          id:
            type: integer
            example: 127850
          accurate_mass:
            type: number
            example: 675.545654296875
          ion_mode:
            $ref: {{model: IonModes}}
          ms_level:
            type: integer
            example: 2
          original_retention_time:
            type: number
            example: 247.95
          precursor_mass:
            type: number
            example: 675.545654296875
          raw_spectrum:
            $ref: {{model: Spectrum}}
          replaced:
            type: boolean
          retention_index:
            type: number
            example: 259.190495161425
          spectrum:
            $ref: {{model: Spectrum}}
          splash:
            $ref: {{model: Splash}}
          sample_id:
            type: string
            example: NIH_Lip_Std_CSH_POS_TissuePool_01
          target_id:
            type: integer
            example: 110854
      - LowercaseTargetTypes:
        description: Target types lowercased
        enum:
          - confirmed
          - unconfirmed
          - uncoinfirmed_consensus
          - is_member
        default: confirmed
      - UppercaseTargetTypes:
        description: Target types uppercased
        enum:
          - CONFIRMED
          - UNCONFIRMED
          - UNCONFIRMED_CONSENSUS
          - IS_MEMBER
        default: CONFIRMED
      - InchiKey:
        pattern: '[A-Z]{14}-[A-Z]{10}-[A-Z]{1}'
      - Spectrum:
        type: string
        description: Spectrum string definition
        example: '86.096703:69919.89 88.363396:3119.44 104.107262:11991.60 114.199013:3147.53 675.543945:6875.87'
      - Compound:
        type: object
        properties:
          id:
            type: integer
            example: 199
          accurate_mass:
            type: number
            example: 818.596801757812
          target_type:
            $ref: {{model: UppercaseTargetTypes}}
          inchi_key:
            $ref: {{model: InchiKey}}
          method:
            $ref: {{model: LibraryName}}
          ms_level:
            type: integer
          required_for_correction:
            type: boolean
          retention_index:
            type: number
            example: 368.360069774002
          spectrum:
            $ref: {{model: Spectrum}}
          splash:
            $ref: {{model: Splash}}
          preferred_name:
            type: string
            nullable: true
            example:
              - unknown_818.5968_368.3601
              - PC (26:0)
          preferred_adduct:
            type: string
            nullable: true
            example: [ M+H ]
          associated_names:
            type: array
            items:
              type: string
          associated_adducts:
            type: array
            items:
              type: string
          associated_comments:
            type: array
            items:
              type: string
          associated_meta:
            type: array
            items:
              type: string
          associated_statuses:
            type: array
            items:
              $ref: {{model: TargetStatus}}
          unique_mass:
            type: number
          precursor_mass:
            type: number
            example: 818.596801757812
          samples:
            type: array
            items:
              type: string
      - TargetStatus:
        type: object
        properties:
          clean:
            type: boolean
          identifiedBy:
            $ref: {{model: UserName}}
      - UserName:
        type: string

  commonModelSchemaFragments:
    parameters:
      LibraryPathParam:
        name: library
        in: path
        required: true
        description: name of the library/method to check
        schema:
          $ref: {{model: LibraryName}}
      SplashPathParam:
        name: splash
        in: path
        required: true
        description: splash key
        schema:
          $ref: {{model: Splash}}
      LimitPathParam:
        name: limit
        in: path
        required: true
        description: number of items to return
        schema:
          type: integer
          default: 10
      OffsetPathParam:
        name: offset
        in: path
        required: true
        description: index of the first query row to return
        schema:
          type: integer
          default: 0
      TypePathParam:
        name: type
        in: path
        required: true
        description: Target Type
        schema:
          $ref: {{model: LowercaseTargetTypes}}
      OldTypePathParam:
        name: type
        in: path
        required: true
        description: Target Type
        schema:
          $ref: {{model: UppercaseTargetTypes}}
      NamePathParam:
        name: name
        description: New name for the target/compound
        in: path
        required: true
        schema:
          type: string
      KeyPathParam:
        name: name
        description: Name of the metadata entry
        in: path
        required: true
        schema:
          type: string
      ValuePathParam:
        name: value
        description: Value of the metadata entry
        in: path
        required: true
        schema:
          type: string
      UserPathParam:
        name: identifiedBy
        in: path
        required: true
        schema:
          $ref: {{model: UserName}}
      ObjectPathParam:
        name: method
        in: path
        required: true
        schema:
          enum:
            - target
            - sample
      ObjectIdPathParam:
        name: value
        in: path
        required: true
        schema:
          type: object
      TargetIdPathParam:
        name: tgt_id
        in: path
        description: Target id
        required: true
        schema:
          type: integer
      LimitQueryParam:
        name: limit
        in: query
        required: true
        description: number of items to return
        schema:
          type: integer
          default: 10
      OffsetQueryParam:
        name: offset
        in: query
        required: true
        description: index of the first query row to return
        schema:
          type: integer
          default: 0
      OrderByQueryParam:
        name: order_by
        in: query
        required: true
        description: column to order results.
        schema:
          $ref: {{model: SortableColumns}}
      DirectionQueryParam:
        name: direction
        in: query
        required: true
        schema:
          $ref: {{model: SortDirection}}
      ValueQueryParam:
        name: value
        in: query
        description: Value to use as the center of the range filter. A value of 0 means no filter
        required: false
        schema:
          type: number
          default: 0
      AccuracyQueryParam:
        name: accuracy
        in: query
        description: value to use ad the limits of the range filter. Only used if 'value' > 0
        required: false
        schema:
          type: number
          default: 0.1
      IdentifiedQueryParam:
        name: identified
        in: query
        description: flag to return known compounds only, where target_name != 'unknown_*'
        required: false
        schema:
          type: boolean
          default: false
      UserQueryParam:
        name: identifiedBy
        in: query
        description: Username associated with this object
        required: true
        schema:
          $ref: {{model: UserName}}
      StatusQueryParam:
        name: clean
        in: query
        description: Is spectrum clean (true) or not (false)
        required: true
        schema:
          type: boolean
          default: false

    responses:
      Response204:
        description: Success empty
        content:
          'application/json':
            schema:
              $ref: {{model: EmptyBody204}}
      MethodResponse400:
        description: Invalid Request
        content:
          'application/json':
            schema:
              $ref: {{model: EmptyBody400}}
      Forbidden403:
        description: Forbidden
        content:
          'application/json':
            schema:
              $ref: {{model: Forbidden403}}
      MethodResponse404:
        description: Not Found
        content:
          'application/json':
            schema:
              $ref: {{model: EmptyBody404}}
      MethodResponse500:
        description: Server Error
        content:
          'application/json':
            schema:
              $ref: {{model: Error}}
      LibraryListResponse:
        description: List of library/method names
        content:
          'application/json':
            schema:
              type: array
              items:
                $ref: {{model: LibraryName}}
      SplashListResponse:
        description: List of splash keys
        content:
          'application/json':
            schema:
              type: array
              items:
                $ref: {{model: Splash}}
      ConfigListResponse:
        description: List of configurations
        content:
          'application/json':
            schema:
              type: object
              properties:
                configs:
                  type: array
                  items:
                    oneOf:
                      - type: integer
                      - type: string
                method:
                  type: string
                value:
                  type: string
      ProfileListResponse:
        description: List of profiles
        content:
          'application/json':
            schema:
              type: object
              properties:
                profiles:
                  type: array
                  items:
                    oneOf:
                      - type: integer
                      - type: string
                method:
                  type: string
                value:
                  type: string
      AnnotationsResponse:
        description: Success
        content:
          'appication/json':
            schema:
              $ref: {{model: AnnotationsList}}
      StatusResponse:
        description: Success
        content:
          'application/json':
            schema:
              type: object
              properties:
                statusCode:
                  type: integer
                  default: 200
                body:
                  type: object
                  properties:
                    clean:
                      type: boolean
                    identifiedBy:
                      $ref: {{model: UserName}}
      CompoundResponse:
        description: Success
        content:
          'application/json':
            schema:
              $ref: {{model: Compound}}



############################################################################################
# this section defines what to include and exclude when packaging artifacts
############################################################################################
package:
  exclude:
    - .git/**
    - .venv/**
    - .idea/**
    - .pytest_cache/**
    - venv/**
    - test/**
    - tests/**
    - node_modules/**
    - integrationTests/**


functions:
  libraries:
    handler: cis/libraries.libraries
    events:
      - http:
          path: libraries
          method: get
          cors: true
          documentation:
            summary: "returns all the libraries in the system"

  libraryExist:
    handler: cis/libraries.exists
    events:
      - http:
          private: true
          path: libraries/{library}
          method: head
          cors: true
          documentation:
            summary: "returns if the given library exist"
          request:
            parameter:
              paths:
                library: true

  librarySize:
    handler: cis/libraries.size
    events:
      - http:
          private: true
          path: libraries/{library}
          method: get
          cors: true
          documentation:
            summary: "returns the count in compounds of a library by type"
          request:
            parameter:
              paths:
                library: true

  librariesDelete:
    handler: cis/libraries.delete
    events:
      - http:
          private: true
          path: libraries/{library}
          method: delete
          cors: true
          documentation:
            summary: "delete the given library"
          request:
            parameter:
              paths:
                library: true

  compoundsOld:
    handler: cis/compounds.all
    events:
      - http:
          private: true
          path: oldcompounds/{library}/{limit}/{offset}
          method: get
          cors: true
          documentation:
            summary: returns all the compounds of the given library
          request:
            parameter:
              paths:
                library: true
                limit: true
                offset: true

      - http:
          private: true
          path: oldcompounds/{library}/{limit}/{offset}/{type}
          method: get
          cors: true
          documentation:
            summary: returns all the compounds of the given library and type
          request:
            parameter:
              paths:
                library: true
                type: true
                limit: true

  compounds:
    handler: cis/compounds.get_sorted
    events:
      - http:
          private: true
          path: compounds/{library}
          method: get
          cors: true
          documentation:
            summary: "returns the splash for all the confirmed compounds of the given library sorted by 'order_by' and limited to 'limit' starting at 'offset'"
          request:
            parameter:
              paths:
                library: true
              querystrings:
                order_by: false
                direction: false
                limit: false
                offset: false
                value: false
                accuracy: false
      - http:
          private: true
          path: compounds/{library}/{tgt_type}
          method: get
          cors: true
          documentation:
            summary: returns the splash for all the compounds of the given library and tgt_type sorted by 'order_by' and limited to 'limit' starting at 'offset'
          request:
            parameter:
              paths:
                library: true
                tgt_type: true
              querystrings:
                order_by: false
                direction: false
                limit: false
                offset: false
                value: false
                accuracy: false

  compoundSetName:
    handler: cis/compounds.register_name
    events:
      - http:
          private: true
          path: compound/identify/{library}/{splash}/{identifiedBy}/{name}
          method: post
          cors: true
          documentation:
            summary: returns if the given compound exists in the given library
          request:
            parameter:
              paths:
                library: true
                splash: true
                identifiedBy: true
                name: true

  compoundDeleteName:
    handler: cis/compounds.delete_name
    events:
      - http:
          private: true
          path: compound/identify/{library}/{splash}/{identifiedBy}/{name}
          method: delete
          cors: true
          documentation:
            summary: returns if the delete of the deletion is ok
          request:
            parameter:
              paths:
                library: true
                splash: true
                identifiedBy: true
                name: true

  compoundSetAdduct:
    handler: cis/compounds.register_adduct
    events:
      - http:
          private: true
          path: compound/adduct/{library}/{splash}/{identifiedBy}/{name}
          method: post
          cors: true
          documentation:
            summary: returns if the given compound exists in the given library
          request:
            parameter:
              paths:
                library: true
                splash: true
                identifiedBy: true
                name: true

  compoundRemoveAdduct:
    handler: cis/compounds.delete_adduct
    events:
      - http:
          private: true
          path: compound/adduct/{library}/{splash}/{identifiedBy}/{name}
          method: delete
          cors: true
          documentation:
            summary: returns if the given compound exists in the given library
          request:
            parameter:
              paths:
                library: true
                splash: true
                identifiedBy: true
                name: true

  compoundSetComment:
    handler: cis/compounds.register_comment
    events:
      - http:
          private: true
          path: compound/comment/{library}/{splash}/{identifiedBy}
          method: post
          cors: true
          documentation:
            summary: returns if the given compound exists in the given library
          request:
            parameter:
              paths:
                library: true
                splash: true
                identifiedBy: true

  compoundSetMeta:
    handler: cis/compounds.register_meta
    events:
      - http:
          private: true
          path: compound/meta/{library}/{splash}/{identifiedBy}/{name}/{value}
          method: post
          cors: true
          documentation:
            summary: returns if the given compound exists in the given library
          request:
            parameter:
              paths:
                library: true
                splash: true
                identifiedBy: true
                name: true
                value: true

  compoundDeleteMeta:
    handler: cis/compounds.delete_meta
    events:
      - http:
          private: true
          path: compound/meta/{library}/{splash}/{identifiedBy}/{name}/{value}
          method: post
          cors: true
          documentation:
            summary: returns if the given compound exists in the given library
          request:
            parameter:
              paths:
                library: true
                splash: true
                identifiedBy: true
                name: true
                value: true

  compoundGet:
    handler: cis/compounds.get
    events:
      - http:
          private: true
          path: compound/{library}/{splash}
          method: get
          cors: true
          documentation:
            summary: returns if the given compound exists in the given library
          request:
            parameter:
              paths:
                library: true
                splash: true

  compoundGetMembers:
    handler: cis/compounds.get_members
    events:
      - http:
          private: true
          path: compound/members/{library}/{splash}/{limit}/{offset}
          method: get
          cors: true
          documentation:
            summary: returns the members of the given compounds
          request:
            parameter:
              paths:
                library: true
                splash: true
                limit: true
                offset: true

  compoundHasMembers:
    handler: cis/compounds.has_members
    events:
      - http:
          private: true
          path: compound/members/{library}/{splash}
          method: head
          cors: true
          documentation:
            summary: returns if the given compound has any associated splashes in this library
          request:
            parameter:
              paths:
                library: true
                splash: true

  compoundExist:
    handler: cis/compounds.exists
    events:
      - http:
          private: true
          path: compound/{library}/{splash}
          method: head
          cors: true
          documentation:
            summary: returns if the given compound exists in the given library
          request:
            parameter:
              paths:
                library: true
                splash: true

  compoundMakeNamePrimary:
    handler: cis/compounds.make_name_primary
    events:
      - http:
          private: true
          path: compound/{library}/{splash}/{name}
          method: put
          cors: true
          documentation:
            summary: updates the primary name of a compound
          request:
            parameter:
              paths:
                library: true
                splash: true
                name: true

  compoundDelete:
    handler: cis/compounds.delete
    events:
      - http:
          private: true
          path: compound/{library}/{splash}
          method: delete
          cors: true
          documentation:
            summary: delete the given bin from the given library
          request:
            parameter:
              paths:
                library: true
                splash: true

  configProfile:
    handler: cis/configurations.profiles
    events:
      - http:
          private: true
          path: profiles/{method}/{value}
          method: get
          cors: true
          documentation:
            summary: returns the list of profiles used to process the object defined in method, either 'target' or 'sample'
          request:
            parameter:
              paths:
                method: true
                value: true

  configConfiguration:
    handler: cis/configurations.configs
    events:
      - http:
          private: true
          path: configurations/{method}/{value}
          method: get
          cors: true
          documentation:
            summary: returns the list of configurations used to process the object defined in method, either 'target' or 'sample'
          request:
            parameter:
              paths:
                method: true
                value: true

  annotations:
    handler: cis/annotations.get_all
    events:
      - http:
          private: true
          path: annotations/{splash}
          method: get
          cors: true
          documentation:
            summary: returns a paged list and the total number of annotations for the given compound
          request:
            parameter:
              paths:
                splash: true
              querystrings:
                limit: false
                offset: false

  spectrumGetStatus:
    handler: cis/spectrum.get_status
    events:
      - http:
          private: true
          path: spectrum/{tgt_id}
          method: get
          cors: true
          documentation:
            summary: Returns the status of a spectrum as being Clean or Dirty (True or False)
          request:
            parameter:
              paths:
                tgt_id: true
              querystrings:
                identifiedBy: true

  spectrumMarkStatus:
    handler: cis/spectrum.register_status
    events:
      - http:
          private: true
          path: spectrum/{tgt_id}
          method: post
          cors: true
          documentation:
            summary: Marks a spectrum as being Clean or Dirty (True or False) for a user
          request:
            parameter:
              paths:
                tgt_id: true
              querystrings:
                clean: true
                identifiedBy: true

  spectrumDeleteStatus:
    handler: cis/spectrum.delete_status
    events:
      - http:
          private: true
          path: spectrum/{tgt_id}
          method: delete
          cors: true
          documentation:
            summary: Deletes the spectrum's Clean or Dirty flag for a user
          request:
            parameter:
              paths:
                tgt_id: true
              querystrings:
                identifiedBy: true
