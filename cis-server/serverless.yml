service: cis

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-domain-manager
  - serverless-python-requirements
  - serverless-aws-documentation
provider:
  name: aws
  runtime: python3.7
  region: us-west-2

  # simple security based on stages and api keys
  # one fits all for production
  apiKeys:
    - "cis-${self:custom.stage}"

  tracing:
    lambda: true
    apiGateway: true

  #required permissions
  iamRoleStatements:
    - Effect: Allow
      Action:
        - iam:PassRole
      Resource: "*"

  memorySize: 128
  timeout: 30
  versionFunctions: false

  logRetentionInDays: 3

  #where to store out data, needs to be manually created!
  deploymentBucket:
    name: "lambdas-stasis"

  ##
  # defines all generated environment variables for lambdas
  environment:
    current_stage: ${self:custom.stage}
    carrot_database: carrot-${self:custom.stage}
    carrot_username: postgres
    carrot_password: Fiehnlab2020
    carrot_host: lc-binbase-dev.czbqhgrlaqbf.us-west-2.rds.amazonaws.com
    carrot_port: 5432


  ##
  # vpc settings
  vpc:
    securityGroupIds: ${self:custom.security}
    subnetIds: ${self:custom.subnets}


############################################################################################
#custom configuration settings
############################################################################################
custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}

  security:
    - 'sg-7d409b03'
  subnets:
    - 'subnet-e382339a'
    - 'subnet-04c0515e'
    - 'subnet-b779a9fc'
    - 'subnet-39f3df11'


  ###
  # custom domain management
  ###

  domains:
    prod: api.metabolomics.us
    test: test-api.metabolomics.us
    dev: dev-api.metabolomics.us
    splashone: splashone.metabolomics.us

  customDomain:
    basePath: "cis"
    domainName: ${self:custom.domains.${self:custom.stage}}
    stage: "${self:custom.stage}"
    createRoute53Record: true

  pythonRequirements:
    dockerizePip: true
    slim: false
    noDeploy:
      - "boto3"
      - "botocore"
      - "moto"
      - "pytest"

  ###
  # documentation
  ###
  documentation:
    api:
      info:
        version: "1"
        title: "CIS-Server"
        description: "REST API for accessing lc-binbase data"
    models:
      - name: "Default500Error"
        description: "default error response"
        contentType: "application/json"
        schema: ${file(models/default_500_error.yml)}
      - name: "Default404Response"
        description: "404 error response"
        contentType: "application/json"
        schema: ${file(models/default_404_response.yml)}
      - name: "LibraryList"
        description: "List of libraries in the system"
        contentType: "application/json"
        schema: ${file(models/string_list.yml)}
      - name: "LibrarySize"
        description: "library existence check"
        contentType: "application/json"
        schema: ${file(models/library_size.yml)}
      - name: "SplashList"
        description: "List of splashes found for the given library"
        contentType: "application/json"
        schema: ${file(models/string_list.yml)}
      - name: "CompoundResponse"
        contentType: "application/json"
        schema: ${file(models/compound_response.yml)}
      - name: "AnnotationResponse"
        contentType: "application/json"
        schema: ${file(models/annotation_response.yml)}

  commonModelSchemaFragments:
    MethodResponse404:
      statusCode: "404"
      responseModels:
        "application/json": "Default404Response"

    MethodResponse500:
      statusCode: "500"
      responseModels:
        "application/json": "Default500Error"


############################################################################################
# this section defines what to include and exclude when packaging artifacts
############################################################################################
package:
  exclude:
    - .git/**
    - .venv/**
    - .idea/**
    - .pytest_cache/**
    - venv/**
    - test/**
    - tests/**
    - node_modules/**
    - integrationTests/**


functions:
  libraries:
    handler: cis/libraries.libraries
    events:
      - http:
          path: libraries
          method: get
          cors: true
          documentation:
            summary: "returns all the libraries in the system"
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500}
              - statusCode: "200"
                responseModels:
                  "application/json": "LibraryList"

  libraryExist:
    handler: cis/libraries.exists
    events:
      - http:
          private: true
          path: libraries/{library}
          method: head
          cors: true
          documentation:
            summary: "returns if the given library exist"
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParams:
              - name: "library"
                description: "name of the library/method to check"
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500}
              - statusCode: "200"

          request:
            parameter:
              paths:
                library: true

  librarySize:
    handler: cis/libraries.size
    events:
      - http:
          private: true
          path: libraries/{library}
          method: get
          cors: true
          documentation:
            summary: "returns the count in compounds of a library by type"
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParams:
              - name: "library"
                description: "name of the library/method to check"
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500}
              - statusCode: "200"
                responseModels:
                  "application/json": "LibrarySize"
          request:
            parameter:
              paths:
                library: true

  librariesDelete:
    handler: cis/libraries.delete
    events:
      - http:
          private: true
          path: libraries/{library}
          method: delete
          cors: true
          documentation:
            summary: "delete the given library"
          request:
            parameter:
              paths:
                library: true

  compoundsOld:
    handler: cis/compounds.all
    events:
      - http:
          private: true
          path: oldcompounds/{library}/{limit}/{offset}
          method: get
          cors: true
          documentation:
            summary: returns all the compounds of the given library
          request:
            parameter:
              paths:
                library: true
                limit: true
                offset: true

      - http:
          private: true
          path: oldcompounds/{library}/{limit}/{offset}/{type}
          method: get
          cors: true
          documentation:
            summary: returns all the compounds of the given library and type
          request:
            parameter:
              paths:
                library: true
                type: true
                limit: true

  compounds:
    handler: cis/compounds.get_sorted
    events:
      - http:
          private: true
          path: compounds/{library}
          method: get
          cors: true
          documentation:
            summary: "returns the splash for all the confirmed compounds of the given library sorted by 'order_by' and limited to 'limit' starting at 'offset'"
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            queryParams:
              - name: "order_by"
                description: "column to order results. Valid values: [tgt_id, tgt_ri, pmz, name, adduct], default: 'tgt_id'"
              - name: "direction"
                description: "sort order. Valid values: [asc, desc], default 'asc'"
              - name: "limit"
                description: "number of items in the result. Default: 10"
              - name: "offset"
                description: "index of the first item in the result (zero-based). Default: 0"
              - name: "value"
                description: "value to use as the center of the range filter. Default: 0 (no filtering)"
              - name: "accuracy"
                description: "value to use ad the limits of the range filter. Default: 0.1 (only used if 'value' > 0)"
            pathParams:
              - name: "library"
                description: "name of the library/method to check"
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500}
              - statusCode: "200"
                responseModels:
                  "application/json": "SplashList"
          request:
            parameter:
              paths:
                library: true
              querystrings:
                order_by: false
                direction: false
                limit: false
                offset: false
                value: false
                accuracy: false
      - http:
          private: true
          path: compounds/{library}/{tgt_type}
          method: get
          cors: true
          documentation:
            summary: returns the splash for all the compounds of the given library and tgt_type sorted by 'order_by' and limited to 'limit' starting at 'offset'
          request:
            parameter:
              paths:
                library: true
                tgt_type: true
              querystrings:
                order_by: false
                direction: false
                limit: false
                offset: false
                value: false
                accuracy: false

  compoundSetName:
    handler: cis/compounds.register_name
    events:
      - http:
          private: true
          path: compound/identify/{library}/{splash}/{identifiedBy}/{name}
          method: post
          cors: true
          documentation:
            summary: returns if the given compound exists in the given library
          request:
            parameter:
              paths:
                library: true
                splash: true
                identifiedBy: true
                name: true

  compoundDeleteName:
    handler: cis/compounds.delete_name
    events:
      - http:
          private: true
          path: compound/identify/{library}/{splash}/{identifiedBy}/{name}
          method: delete
          cors: true
          documentation:
            summary: returns if the delete of the deletion is ok
          request:
            parameter:
              paths:
                library: true
                splash: true
                identifiedBy: true
                name: true

  compoundSetAdduct:
    handler: cis/compounds.register_adduct
    events:
      - http:
          private: true
          path: compound/adduct/{library}/{splash}/{identifiedBy}/{name}
          method: post
          cors: true
          documentation:
            summary: returns if the given compound exists in the given library
          request:
            parameter:
              paths:
                library: true
                splash: true
                identifiedBy: true
                name: true

  compoundRemoveAdduct:
    handler: cis/compounds.delete_adduct
    events:
      - http:
          private: true
          path: compound/adduct/{library}/{splash}/{identifiedBy}/{name}
          method: delete
          cors: true
          documentation:
            summary: returns if the given compound exists in the given library
          request:
            parameter:
              paths:
                library: true
                splash: true
                identifiedBy: true
                name: true

  compoundSetComment:
    handler: cis/compounds.register_comment
    events:
      - http:
          private: true
          path: compound/comment/{library}/{splash}/{identifiedBy}
          method: post
          cors: true
          documentation:
            summary: returns if the given compound exists in the given library
          request:
            parameter:
              paths:
                library: true
                splash: true
                identifiedBy: true

  compoundSetMeta:
    handler: cis/compounds.register_meta
    events:
      - http:
          private: true
          path: compound/meta/{library}/{splash}/{identifiedBy}/{name}/{value}
          method: post
          cors: true
          documentation:
            summary: returns if the given compound exists in the given library
          request:
            parameter:
              paths:
                library: true
                splash: true
                identifiedBy: true
                name: true
                value: true

  compoundSetMeta:
    handler: cis/compounds.register_meta
    events:
      - http:
          private: true
          path: compound/meta/{library}/{splash}/{identifiedBy}/{name}/{value}
          method: post
          cors: true
          documentation:
            summary: returns if the given compound exists in the given library
          request:
            parameter:
              paths:
                library: true
                splash: true
                identifiedBy: true
                name: true
                value: true

  compoundDeleteMeta:
    handler: cis/compounds.delete_meta
    events:
      - http:
          private: true
          path: compound/meta/{library}/{splash}/{identifiedBy}/{name}/{value}
          method: post
          cors: true
          documentation:
            summary: returns if the given compound exists in the given library
          request:
            parameter:
              paths:
                library: true
                splash: true
                identifiedBy: true
                name: true
                value: true

  compoundGet:
    handler: cis/compounds.get
    events:
      - http:
          private: true
          path: compound/{library}/{splash}
          method: get
          cors: true
          documentation:
            summary: returns if the given compound exists in the given library
          request:
            parameter:
              paths:
                library: true
                splash: true

  compoundGetMembers:
    handler: cis/compounds.get_members
    events:
      - http:
          private: true
          path: compound/members/{library}/{splash}/{limit}/{offset}
          method: get
          cors: true
          documentation:
            summary: returns the members of the given compounds
          request:
            parameter:
              paths:
                library: true
                splash: true
                limit: true
                offset: true

  compoundHasMembers:
    handler: cis/compounds.has_members
    events:
      - http:
          private: true
          path: compound/members/{library}/{splash}
          method: head
          cors: true
          documentation:
            summary: returns if the given compound has any associated splashes in this library
          request:
            parameter:
              paths:
                library: true
                splash: true

  compoundExist:
    handler: cis/compounds.exists
    events:
      - http:
          private: true
          path: compound/{library}/{splash}
          method: head
          cors: true
          documentation:
            summary: returns if the given compound exists in the given library
          request:
            parameter:
              paths:
                library: true
                splash: true

  compoundMakeNamePrimary:
    handler: cis/compounds.make_name_primary
    events:
      - http:
          private: true
          path: compound/{library}/{splash}/{name}
          method: put
          cors: true
          documentation:
            summary: updates the primary name of a compound
          request:
            parameter:
              paths:
                library: true
                splash: true
                name: true

  compoundDelete:
    handler: cis/compounds.delete
    events:
      - http:
          private: true
          path: compound/{library}/{splash}
          method: delete
          cors: true
          documentation:
            summary: delete the given bin from the given library
          request:
            parameter:
              paths:
                library: true
                splash: true

  configProfile:
    handler: cis/configurations.profiles
    events:
      - http:
          private: true
          path: profiles/{method}/{value}
          method: get
          cors: true
          documentation:
            summary: returns the list of profiles used to process the object defined in method, either 'target' or 'sample'
          request:
            parameter:
              paths:
                method: true
                value: true

  configConfiguration:
    handler: cis/configurations.configs
    events:
      - http:
          private: true
          path: configurations/{method}/{value}
          method: get
          cors: true
          documentation:
            summary: returns the list of configurations used to process the object defined in method, either 'target' or 'sample'
          request:
            parameter:
              paths:
                method: true
                value: true

  annotations:
    handler: cis/annotations.get_all
    events:
      - http:
          private: true
          path: annotations/{splash}
          method: get
          cors: true
          documentation:
            summary: returns a paged list and the total number of annotations for the given compound
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            queryParams:
              - name: "limit"
                description: "number of items in the result. Default: 50"
              - name: "offset"
                description: "index of the first row to put in the result"
            pathParams:
              - name: "splash"
                description: "splash key of the target to check"
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.MethodResponse500}
              - statusCode: "200"
                responseModels:
                  "application/json": AnnotationResponse
          request:
            parameter:
              paths:
                splash: true
              querystrings:
                limit: false
                offset: false

  spectrumGetStatus:
    handler: cis/spectrum.get_status
    events:
      - http:
          private: true
          path: spectrum/{tgt_id}
          method: get
          cors: true
          documentation:
            summary: Returns the status of a spectrum as being Clean or Dirty (True or False)
          request:
            parameter:
              paths:
                tgt_id: true
              querystrings:
                identifiedBy: true

  spectrumMarkStatus:
    handler: cis/spectrum.register_status
    events:
      - http:
          private: true
          path: spectrum/{tgt_id}
          method: post
          cors: true
          documentation:
            summary: Marks a spectrum as being Clean or Dirty (True or False) for a user
          request:
            parameter:
              paths:
                tgt_id: true
              querystrings:
                clean: true
                identifiedBy: true

  spectrumDeleteStatus:
    handler: cis/spectrum.delete_status
    events:
      - http:
          private: true
          path: spectrum/{tgt_id}
          method: delete
          cors: true
          documentation:
            summary: Deletes the spectrum's Clean or Dirty flag for a user
          request:
            parameter:
              paths:
                tgt_id: true
              querystrings:
                identifiedBy: true
