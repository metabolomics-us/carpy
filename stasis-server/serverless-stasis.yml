service: stasis

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-domain-manager
  - serverless-python-requirements
  - serverless-aws-documentation

provider:
  name: aws
  runtime: python3.8
  region: us-west-2
  tags:
    service: binbase
    scope: ${self:custom.stage}

  # simple security based on stages and api keys
  # one fits all for production
  apiKeys:
    - "stasis-tracking-${self:custom.stage}"

  #required permissions
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "*"

    - Effect: Allow
      Action:
        - sqs:*
      Resource: { "Fn::Join": [ ":", [ "arn:aws:sqs:${self:custom.region}",  "*:*" ] ] }

    - Effect: Allow
      Action:
        - s3:*
      Resource: "arn:aws:s3:::*"

    - Effect: "Allow"
      Action:
        - ecs:RunTask
        - ecs:ListTasks
        - ecs:DescribeTasks
      Resource: "*"

    - Effect: Allow
      Action:
        - iam:PassRole
      Resource: "*"

    - Effect: Allow
      Action:
        - xray:PutTraceSegment
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
  memorySize: 128
  timeout: 30
  versionFunctions: false

  logRetentionInDays: 3

  #where to store out data, needs to be manually created!
  deploymentBucket:
    name: "lambdas-stasis"

  ##
  # defines all generate environment variables for lambdas
  environment:
    current_stage: ${self:custom.stage}
    schedule_queue: ${self:custom.scheduleQueue}
    sample_sync_queue: ${self:custom.syncQueue}
    trackingTable: ${self:custom.trackingTable}
    ecsTable: ${self:custom.ecsTable}
    acquisitionTable: ${self:custom.acquisitionTable}
    aggregation_queue: ${self:custom.aggregationQueue}
    jobStateTable: ${self:custom.jobStateTable}
    jobTrackingTable: ${self:custom.jobTrackingTable}
    resultTable: ${self:custom.resultTable}
    dataBucket: ${self:custom.dataJSONBucketName}
    jobQueue: ${self:custom.jobQueue}

############################################################################################
#custom configuration settings
############################################################################################
custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}

  ###
  # Stasis resources definitions
  ###
  trackingTable: "StasisTrackingTable-${self:custom.stage}"
  acquisitionTable: "StasisMetaDataTable-${self:custom.stage}"
  jobStateTable: "StasisJobStateTable-${self:custom.stage}"
  jobTrackingTable: "StasisJobTrackingTable-${self:custom.stage}"
  resultTable: "wcmc-data-stasis-result-${self:custom.stage}"
  ecsTable: "wcmc-data-stasis-ecs-${self:custom.stage}"

  ###
  # Carrot resources definition
  ###
  targetTable: "CarrotTargetTable-${self:custom.stage}"
  # spectra bucket S3 or cheaper version

  ###
  # Carrot bucket definition. This contains all the rawdata in carrot
  ###
  dataRawBucketName: "wcmc-data-stasis-raw-${self:custom.stage}"

  ###
  # Carrot bucket to store aggregated results
  ###
  dataZipBucketName: "wcmc-data-stasis-agg-${self:custom.stage}"

  ###
  # Carrot bucket containing all the json results
  dataJSONBucketName: "wcmc-data-stasis-result-${self:custom.stage}"

  ###
  # Queues
  ###
  scheduleQueue: "StasisScheduleQueue-${self:custom.stage}"

  ###
  # used for synchronization of sample states
  # and associated job states
  syncQueue: "StasisSyncQueue-${self:custom.stage}"

  ###
  # used for processing of scheduled jobs in the system
  jobQueue: "StasisJobQueue-${self:custom.stage}"

  ###
  # this queue will take care of holding all pending aggregation tasks
  aggregationQueue: "JobsAggregationQueue-${self:custom.stage}"

  ###
  # custom domain management
  ###

  domains:
    prod: api.metabolomics.us
    test: test-api.metabolomics.us
    dev: dev-api.metabolomics.us
    splashone: splashone.metabolomics.us

  customDomain:
    basePath: "stasis"
    domainName: ${self:custom.domains.${self:custom.stage}}
    stage: "${self:custom.stage}"
    createRoute53Record: true

  pythonRequirements:
    dockerizePip: true
    slim: false
    noDeploy:
      - "boto3"
      - "botocore"
      - "moto"
      - "pytest"

  documentation:
    api:
      info:
        version: '1.0'
        title: Stasis-Server API
        description: <h2>Specification for the current version of Stasis' scheduler related lambdas exposed as REST services</h2>
        #        termsOfService: AsIs
        contact:
          name: Fiehnlab IT Team
          url: https://fiehnlab.ucdavis.edu/staff#it
        license:
          name: CDDL-1.0
          url: https://opensource.org/licenses/CDDL-1.0
    models:
      - name: EmptyBody204
        contentType: "application/json"
        schema:
          type: object
          properties:
            statusCode:
              type: integer
              default: 204
            body:
              type: string
      - name: EmptyBody400
        contentType: "application/json"
        schema:
          type: object
          properties:
            statusCode:
              type: integer
              default: 400
      - name: Forbidden403
        contentType: "application/json"
        schema:
          type: object
          properties:
            statusCode:
              type: integer
              default: 403
            body:
              type: object
              properties:
                message:
                  type: string
      - name: EmptyBody404
        contentType: "application/json"
        schema:
          type: object
          properties:
            statusCode:
              type: integer
              default: 404
            body:
              type: string
      - name: EmptyBody404
        contentType: "application/json"
        schema:
          type: object
          properties:
            statusCode:
              type: integer
              default: 404
            body:
              type: string
      - name: EmptyBody422
        contentType: "application/json"
        schema:
          type: object
          properties:
            statusCode:
              type: integer
              default: 422
            body:
              type: object
              properties:
                error:
                  type: string
      - name: ServerError500
        contentType: "application/json"
        schema:
          type: object
          properties:
            statusCode:
              type: integer
              default: 500
            body:
              type: object
              properties:
                error:
                  type: string
      - name: ResultData
        contentType: "application/json"
        schema:
          type: object
          properties:
            id:
              type: string
            sample:
              type: string
            time:
              type: timestamp
            injections:
              type: array
              items:
                $ref: {{model: Injection}}
          required: [ "sample", "injections" ]
      - name: Injection
        contentType: "application/json"
        schema:
          type: string
      - name: TrackingData
        contentType: "application/json"
        schema:
          type: object
          properties:
            sample:
              type: string
            state:
              $ref: {{model: State}}
            fileHandle:
              type: string
            reason:
              type: string
          required: [ "sample", "state" ]
      - name: JobSync
        contentType: "application/json"
        schema:
          type: object
          properties:
            result:
              type: string
            job:
              type: string
      - name: ExperimentList
        contentType: "application/json"
        schema:
          type: object
          properties:
            items:
              type: array
              items:
                $ref: {{model: Acquisition}}
            last_item:
              type: string
      - name: Acquisition
        contentType: "application/json"
        schema:
          type: object
          properties:
            id:
              type: string
            experiment:
              type: string
            sample:
              type: string
            acquisition:
              type: object
              properties:
                method:
                  type: string
                instrument:
                  type: string
                ionisation:
                  $ref: {{model: Ionization}}
            metadata:
              $ref: {{model: Metadata}}
            userdata:
              $ref: {{model: Userdata}}
            processing:
              type: string
      - name: Ionisation
        contentType: "application/json"
        schema:
          type: string
          enum:
            - positive
            - negative
      - name: Metadata
        contentType: "application/json"
        schema:
          type: object
          properties:
            class:
              type: string
            species:
              type: string
            organ:
              type: string
      - name: Userdata
        contentType: "application/json"
        schema:
          type: object
          properties:
            label:
              type: string
            comment:
              type: string
      - name: AcquisitionRequest
        contentType: "application/json"
        schema:
          $ref: {{model: Acquisition}}
      - name: StatusList
        contentType: "application/json"
        schema:
          type: object
          properties:
            "^.*$":
              type: integer


  commonModelSchemaFragments:
    parameters:
      SamplePathParam:
        name: sample
        in: path
        description: Sample ID (filename without extension)
        required: true
        schema:
          type: string
      JobPathParam:
        name: job
        in: path
        description: Job name
        required: true
        schema:
          type: string
      ExperimentPathParam:
        name: experiment
        in: path
        description: experiment name
        required: true
        schema:
          type: string
      PageSizePathParam:
        name: psize
        in: path
        description: page number
        required: true
        schema:
          type: integer
      LastSamplePathParam:
        name: lastSample
        in: path
        description: sample name
        required: true
        schema:
          type: string
      LastKeyPathParam:
        name: last_key
        in: path
        description: sample name
        required: true
        schema:
          type: string

    responses:
      MethodResponse204:
        statusCode: '204'
        responseModels:
          "application/json": EmptyBody204
      MethodResponse400:
        statusCode: '400'
        responseModels:
          "application/json": EmptyBody400
      MethodResponse403:
        statusCode: '403'
        responseModels:
          "application/json": Forbidden403
      MethodResponse404:
        statusCode: '404'
        responseModels:
          "application/json": EmptyBody404
      MethodResponse418:
        statusCode: '418'
        responseModels:
          "application/json": EmptyBody422
      MethodResponse422:
        statusCode: '422'
        responseModels:
          "application/json": EmptyBody422
      MethodResponse500:
        statusCode: '500'
        responseModels:
          "application/json": ServerError500
      MethodResponse503:
        statusCode: '503'
        responseModels:
          "application/json": ServerError500
      CreateResultResponse:
        statusCode: '200'
        responseModels:
          "application/json": ResultData
      TrackingResultResponse:
        statusCode: '200'
        responseModels:
          "application/json": TrackingData
      JobSyncResultResponse:
        statusCode: '200'
        responseModels:
          "application/json": JobSync
      ExperimentResultResponse:
        statusCode: '200'
        responseModels:
          "application/json": ExperimentList
      AcquisitionResponse:
        statusCode: '200'
        responseModels:
          "application/json": AcquisitionList
      StatusListResponse:
        statusCode: '200'
        responseModels:
          "application/json": StatusList
      JobResultResponse:
        statusCode: '200'
        responseModels:
          "application/json": EmptyBody204

############################################################################################
# this section defines what to include and exclude when packaging artifacts
############################################################################################
package:
  exclude:
    - .git/**
    - .venv/**
    - .idea/**
    - .pytest_cache/**
    - venv/**
    - test/**
    - tests/**
    - node_modules/**
    - integrationTests/**

############################################################################################
# this section defines all lambda function and triggers
############################################################################################
functions:


  processingresultexits:
    handler: stasis/results/exists.exist
    events:
      - http:
          private: true
          path: result/{sample}
          method: head
          cors: true
          request:
            parameter:
              paths:
                sample: true
          documentation:
            summary: check if a data processing result exists already
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParams:
              - ${self:custom.commonModelSchemaFragments.parameters.SamplePathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
              - statusCode: '200'
                responseModel:
                  "application/json":
                    contentType: "application/json"
                    schema:
                      type: string

  #fetches an result record
  resultcreate:
    handler: stasis/results/create.create
    events:
      - http:
          path: result
          private: true
          method: post
          cors: true
          documentation:
            summary: uploads a new data processing result.
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            requestModels:
              "application/json": ResultData
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse400}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
              - statusCode: '200'
                responseModels:
                  "application/json": CreateResultResponse

    #defines to which topic we want to connect
    environment:
      resultTable: ${self:custom.resultTable}


  #creates a new tracking record in the system
  trackingcreate:
    handler: stasis/tracking/create.create
    events:
      - http:
          path: tracking
          private: true
          method: post
          cors: true
          documentation:
            summary: creates a new tracking record in the database for the given sample
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            requestModels:
              "application/json": TrackingData
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse400}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
              - statusCode: '200'
                responseModels:
                  "application/json": CreateTrackingResponse

  # creates a tracking update
  # whenever a sample status got pushed
  job_synchronization_status:
    handler: stasis/jobs/sync.do_sync
    events:
      - sqs:
          arn:
            Fn::Join:
              - ':'
              - - arn
                - aws
                - sqs
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.syncQueue}
    timeout: 900
    memorysize: 512

  job_synchronization_status_force:
    handler: stasis/jobs/sync.do_sync
    events:
      - http:
          private: true
          path: job/sync/{job}
          method: put
          cors: true
          documentation:
            summary: forces the synchronization of a job. For diagnostics reasons and in case the system is hanging.
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParams:
              - ${self:custom.commonModelSchemaFragments.parameters.JobPathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse400}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
              - statusCode: '200'
                responseModels:
                  "application/json": JobSyncResponse
          request:
            parameter:
              paths:
                job: true

  #fetches an existing tracking record from the system
  trackingget:
    handler: stasis/tracking/get.get
    events:
      - http:
          path: tracking/{sample}
          private: true
          method: get
          cors: true
          documentation:
            summary: loads the tracking information for this sample
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParams:
              - ${self:custom.commonModelSchemaFragments.parameters.SamplePathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse422}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
              - statusCode: '200'
                responseModels:
                  "application/json": TrackingResultResponse
          request:
            parameter:
              paths:
                sample: true


  #fetches an existing tracking record from the system
  trackingdelete:
    handler: stasis/tracking/delete.delete
    events:
      - http:
          path: tracking/{sample}
          private: true
          method: delete
          cors: true
          documentation:
            summary: deletes the tracking information for the given sample
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParams:
              - ${self:custom.commonModelSchemaFragments.parameters.SamplePathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse204}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse422}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
          request:
            parameter:
              paths:
                sample: true

  #fetches a list of samples in an experiment
  trackingexperiment:
    handler: stasis/experiment/experiment.get
    events:
      - http:
          path: experiment/{experiment}
          method: get
          private: true
          cors: true
          request:
            parameter:
              path:
                experiment: true
          documentation:
            summary: 'loads the first page of the experiment (default page size: 25 items)'
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParams:
              - ${self:custom.commonModelSchemaFragments.parameters.ExperimentPathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse418}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse422}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
              - statusCode: '200'
                responseModels:
                  "application/json": ExperimentResultResponse
      - http:
          path: experiment/{experiment}/{psize}
          method: get
          cors: true
          private: true
          request:
            parameter:
              path:
                experiment: true
                psize: true
          documentation:
            summary: fetches an experiment in paginated mode in the given page size
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParams:
              - ${self:custom.commonModelSchemaFragments.parameters.ExperimentPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.PageSizePathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse418}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse422}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
              - statusCode: '200'
                responseModels:
                  "application/json": ExperimentResultResponse
      - http:
          path: experiment/{experiment}/{psize}/{lastSample}
          method: get
          cors: true
          private: true
          request:
            parameter:
              path:
                experiment: true
                psize: true
                lastSample: true
          documentation:
            summary: iterative way to load an experiment definition. Based on the page size and the last fetched sample
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParams:
              - ${self:custom.commonModelSchemaFragments.parameters.ExperimentPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.PageSizePathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.LastSamplePathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse418}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse422}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
              - statusCode: '200'
                responseModels:
                  "application/json": ExperimentResultResponse


  #fetches an acquisition record
  acquisitionget:
    handler: stasis/acquisition/get.get
    events:
      - http:
          path: acquisition/{sample}
          method: get
          cors: true
          private: true
          request:
            parameter:
              paths:
                sample: true
          documentation:
            summary: fetches the acquisition information for the given sample
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParams:
              - ${self:custom.commonModelSchemaFragments.parameters.SamplePathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
              - statusCode: '200'
                responseModels:
                  "application/json": AcquisitionResponse

  #fetches an acquisition record
  acquisitioncreate:
    handler: stasis/acquisition/create.create
    events:
      - http:
          path: acquisition
          method: post
          private: true
          cors: true
          documentation:
            summary: creates a new record with the given acquisition information
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            requestModels:
              "application/json": AcquisitionRequest
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
              - statusCode: '200'
                responseModels:
                  "application/json": AcquisitionResponse


  # fetches the list of tracking statuses
  statusget:
    handler: stasis/status/get.get
    events:
      - http:
          path: status
          method: get
          private: true
          cors: true
          documentation:
            summary: returns all possible status names and their priority
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
              - statusCode: '200'
                responseModels:
                  "application/json": StatusListResponse

  #checks existence of a raw data file
  fileexists:
    handler: stasis/file/exists.exists
    events:
      - http:
          private: true
          path: file/{sample}
          method: head
          cors: true
          request:
            parameter:
              paths:
                sample: true
          documentation:
            summary: evaluates if a certain file exists
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParams:
              - ${self:custom.commonModelSchemaFragments.parameters.SamplePathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
              - statusCode: '200'
                responseModels:
                  "application/json": EmptyBody204

    environment:
      dataBucket: ${self:custom.dataRawBucketName}

  jobresultexits:
    handler: stasis/jobs/result.exist
    events:
      - http:
          private: true
          path: job/result/{job}
          method: head
          cors: true
          request:
            parameter:
              paths:
                job: true
          documentation:
            summary: check if a job result exists
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParams:
              - ${self:custom.commonModelSchemaFragments.parameters.JobPathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse503}
              - statusCode: '200'
                responseModels:
                  "application/json": EmptyBody204
    #defines to which topic we want to connect
    environment:
      dataBucket: ${self:custom.dataZipBucketName}

  #creates a new tracking record in the system
  jobtrackingcreate:
    handler: stasis/jobs/tracking.create
    events:
      - http:
          path: job/tracking
          private: true
          method: post
          cors: true
          documentation:
            summary: updates the tracking status of a sample with the associated job
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            requestModels:
              "application/json": JobTrackingRequest
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
              - statusCode: '200'
                responseModels:
                  "application/json": EmptyBody204

  #fetches an existing tracking record from the system
  jobtrackingget:
    handler: stasis/jobs/tracking.get
    events:
      - http:
          path: job/tracking/{job}/{sample}
          private: true
          method: get
          cors: true
          request:
            parameter:
              paths:
                job: true
                sample: true
          documentation:
            summary: Returns the tacking status of a sample with an associated job
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParams:
              - ${self:custom.commonModelSchemaFragments.parameters.JobPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.SamplePathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
              - statusCode: '200'
                responseModels:
                  "application/json": EmptyBody204

  # computes the current state of the given job
  jobtrackingstatus:
    handler: stasis/jobs/tracking.status
    events:
      - http:
          path: job/status/{job}
          private: true
          method: get
          cors: true
          request:
            parameter:
              paths:
                job: true
          documentation:
            summary: returns the overal status of the given job
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParams:
              - ${self:custom.commonModelSchemaFragments.parameters.JobPathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
      - http:
          path: job/status/{job}
          private: true
          method: post
          cors: true
          request:
            parameter:
              paths:
                job: true
          documentation:
            summary: forcefully updates the status of a job
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParams:
              - ${self:custom.commonModelSchemaFragments.parameters.JobPathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
    #defines to which topic we want to connect
    environment:
      trackingTable: ${self:custom.trackingTable}
      jobStateTable: ${self:custom.jobStateTable}
      jobTrackingTable: ${self:custom.jobTrackingTable}

  # computes the complete job
  jobdescription:
    handler: stasis/jobs/tracking.description
    events:
      - http:
          path: job/{job}/{last_key}
          private: true
          method: get
          cors: true
          request:
            parameter:
              paths:
                job: true
                last_key: false
          documentation:
            summary: return the complete job description with all associated samples and there states
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParams:
              - ${self:custom.commonModelSchemaFragments.parameters.JobPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.LastKeyPathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
      - http:
          path: job/{job}
          private: true
          method: get
          cors: true
          request:
            parameter:
              paths:
                job: true
          documentation:
            summary: return the complete job description with all associated samples and their states
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParams:
              - ${self:custom.commonModelSchemaFragments.parameters.JobPathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
    #defines to which topic we want to connect
    environment:
      trackingTable: ${self:custom.trackingTable}
      jobStateTable: ${self:custom.jobStateTable}
      jobTrackingTable: ${self:custom.jobTrackingTable}


  #schedule data to for handling the processing and aggregation on the backend
  jobremovesample:
    handler: stasis/jobs/schedule.remove_sample_for_job
    events:
      - http:
          path: job/sample/remove/{job}/{sample}
          method: delete
          private: true
          cors: true
          request:
            parameter:
              paths:
                job: true
                sample: true
          documentation:
            summary: removes a sample associated with a job. required for performance reasons
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParams:
              - ${self:custom.commonModelSchemaFragments.parameters.JobPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.SamplePathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
    # requires more memory to get access to faster cpus
    #defines to which topic we want to connect
    environment:
      ##
      # contains scheduling events
      schedule_queue: ${self:custom.scheduleQueue}
      ##
      # contains aggregation events
      aggregation_queue: ${self:custom.aggregationQueue}
      jobStateTable: ${self:custom.jobStateTable}
      jobTrackingTable: ${self:custom.jobTrackingTable}
      trackingTable: ${self:custom.trackingTable}
      acquisitionTable: ${self:custom.acquisitionTable}

  #schedule data to for handling the processing and aggregation on the backend
  jobstoresample:
    handler: stasis/jobs/schedule.store_sample_for_job
    events:
      - http:
          path: job/sample/store
          method: post
          private: true
          cors: true
          documentation:
            summary: stores a sample associated with a job. required for performance reasons
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
    # requires more memory to get access to faster cpus
    #defines to which topic we want to connect
    environment:
      ##
      # contains scheduling events
      schedule_queue: ${self:custom.scheduleQueue}
      ##
      # contains aggregation events
      aggregation_queue: ${self:custom.aggregationQueue}
      jobStateTable: ${self:custom.jobStateTable}
      jobTrackingTable: ${self:custom.jobTrackingTable}
      trackingTable: ${self:custom.trackingTable}
      acquisitionTable: ${self:custom.acquisitionTable}

  #schedule data to for handling the processing and aggregation on the backend
  jobstore:
    handler: stasis/jobs/schedule.store_job
    events:
      - http:
          path: job/store
          method: post
          private: true
          cors: true
          documentation:
            summary: schedules a job to be computed to the backend queue
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
    # requires more memory to get access to faster cpus
    #defines to which topic we want to connect
    environment:
      ##
      # contains scheduling events
      schedule_queue: ${self:custom.scheduleQueue}
      ##
      # contains aggregation events
      aggregation_queue: ${self:custom.aggregationQueue}
      jobStateTable: ${self:custom.jobStateTable}
      jobTrackingTable: ${self:custom.jobTrackingTable}
      trackingTable: ${self:custom.trackingTable}
      acquisitionTable: ${self:custom.acquisitionTable}


  zipbucket:
    handler: stasis/bucket/bucket.bucket_zip
    events:
      - http:
          private: true
          path: data/zip
          method: get
          cors: true
          documentation:
            summary: returns the name of the bucket for zipped aggregated data
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
    environment:
      dataBucket: ${self:custom.dataZipBucketName}

  jsonbucket:
    handler: stasis/bucket/bucket.bucket_json
    events:
      - http:
          private: true
          path: data/json
          method: get
          cors: true
          documentation:
            summary: returns the name of the bucket for json result data
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
    environment:
      dataBucket: ${self:custom.dataJSONBucketName}

  rawbucket:
    handler: stasis/bucket/bucket.bucket_raw
    events:
      - http:
          private: true
          path: data/raw
          method: get
          cors: true
          documentation:
            summary: returns the name of the bucket for all raw data
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
    environment:
      dataBucket: ${self:custom.dataRawBucketName}

