service: stasis

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-domain-manager
  - serverless-python-requirements
  - serverless-aws-documentation
provider:
  name: aws
  runtime: python3.7
  region: us-west-2

  # simple security based on stages and api keys
  # one fits all for production
  apiKeys:
    - "stasis-${self:custom.stage}"

  #required permissions
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: "*"

    - Effect: Allow
      Action:
        - sqs:*
      Resource: { "Fn::Join": [":", ["arn:aws:sqs:${self:custom.region}",  "*:*" ] ]  }

    - Effect: Allow
      Action:
        - s3:*
      Resource: "arn:aws:s3:::*"
    - Effect: "Allow"
      Action:
        - ecs:RunTask
        - ecs:ListTasks
        - ecs:DescribeTasks
      Resource: "*"
    - Effect: Allow
      Action:
        - iam:PassRole
      Resource: "*"

  memorySize: 128
  timeout: 90
  versionFunctions: false

  logRetentionInDays: 3

  #where to store out data, needs to be manually created!
  deploymentBucket:
    name: "lambdas-stasis"

  ##
  # defines all generat environment variables for lambdas
  environment:
    current_stage: ${self:custom.stage}
    schedule_queue: ${self:custom.scheduleQueue}
    sample_sync_queue: ${self:custom.syncQueue}
    trackingTable: ${self:custom.trackingTable}
    acquisitionTable: ${self:custom.acquisitionTable}  #returns all statuses
    aggregation_queue: ${self:custom.aggregationQueue}
    jobStateTable: ${self:custom.jobStateTable}
    jobTrackingTable: ${self:custom.jobTrackingTable}
    resultTable: ${self:custom.resultTable}
    dataBucket: ${self:custom.dataJSONBucketName}
############################################################################################
#custom configuration settings
############################################################################################
custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}

  ###
  # Stasis resources definitions
  ###
  trackingTable: "StasisTrackingTable-${self:custom.stage}"
  acquisitionTable: "StasisMetaDataTable-${self:custom.stage}"
  jobStateTable: "StasisJobStateTable-${self:custom.stage}"
  jobTrackingTable: "StasisJobTrackingTable-${self:custom.stage}"
  resultTable: "wcmc-data-stasis-result-${self:custom.stage}"

  ###
  # Carrot resources definition
  ###
  targetTable: "CarrotTargetTable-${self:custom.stage}"
  # spectra bucket S3 or cheaper version

  ###
  # Carrot bucket definition. This contains all the rawdata in carrot
  ###
  dataRawBucketName: "wcmc-data-stasis-raw-${self:custom.stage}"

  ###
  # Carrot bucket to store aggregated results
  ###
  dataZipBucketName: "wcmc-data-stasis-agg-${self:custom.stage}"

  ###
  # Carrot bucket containing all the json results
  dataJSONBucketName: "wcmc-data-stasis-result-${self:custom.stage}"

  ###
  # Queues
  ###
  scheduleQueue: "StasisScheduleQueue-${self:custom.stage}"

  ###
  # used for synchronization
  syncQueue: "StasisSyncQueue-${self:custom.stage}"

  ###
  # this queue will take care of holding all pending aggregation tasks
  aggregationQueue: "JobsAggregationQueue-${self:custom.stage}"

  ###
  # custom domain management
  ###

  domains:
    prod: api.metabolomics.us
    test: test-api.metabolomics.us
    dev:  dev-api.metabolomics.us
    prod2: prod2.metabolomics.us
    test2: test2.metabolomics.us
    dev2:  dev2.metabolomics.us

  customDomain:
    basePath: "stasis"
    domainName: ${self:custom.domains.${self:custom.stage}}
    stage: "${self:custom.stage}"
    createRoute53Record: true

  pythonRequirements:
    dockerizePip: true
    slim: false
    noDeploy:
      - "boto3"
      - "botocore"
      - "moto"
      - "pytest"


############################################################################################
# this section defines what to include and exclud when packaging artifacts
############################################################################################
package:
  exclude:
    - .git/**
    - .venv/**
    - .idea/**
    - .pytest_cache/**
    - venv/**
    - test/**
    - tests/**
    - node_modules/**
    - integrationTests/**

############################################################################################
# this section defines all lambda function and triggers
############################################################################################
functions:
  fargate_count:
    handler: stasis/schedule/schedule.scheduled_task_size
    events:
      - http:
          path: schedule/cluster/count
          method: get
          cors: true
          documentation:
            summary: returns the current scheduled tasks size
    environment:
      current_stage: ${self:custom.stage}

  fargate_processing_monitor:
    handler: stasis/schedule/monitor.monitor_queue
    events:
      - schedule:
          rate: rate(1 minute)
          documentation:
            summary: monitors the scheduling queue and ensures correct quantity of scheduled jobs. This has to be driven over cron right now

      - http:
          private: true
          path: sync/samples
          method: get
          cors: true
          documentation:
            summary: synchronizes the samples with the job state table


  fargate_job_monitor:
    handler: stasis/jobs/schedule.monitor_jobs
    events:
      - http:
          private: true
          path: sync/jobs
          method: get
          cors: true
          documentation:
            summary: synchronizes the job state


  fargate_tasks:
    handler: stasis/schedule/schedule.current_tasks
    events:
      - http:
          private: true
          path: schedule/cluster/tasks
          method: get
          cors: true
          documentation:
            summary: returns all currently pending tasks
    environment:
      current_stage: ${self:custom.stage}

  #fetches an result record
  resultGet:
    handler: stasis/results/get.get
    events:
      - http:
          private: true
          path: result/{sample}
          method: get
          cors: true
          documentation:
            summary: downloads a data processing result
          request:
            parameter:
              paths:
                sample: true
    #defines to which topic we want to connect
    environment:
      resultTable: ${self:custom.resultTable}
  processingResultExits:
    handler: stasis/results/exists.exist
    events:
      - http:
          private: true
          path: result/{sample}
          method: head
          cors: true
          documentation:
            summary: check if a data processing result exists already
          request:
            parameter:
              paths:
                sample: true

  #fetches an result record
  resultCreate:
    handler: stasis/results/create.create
    events:
      - http:
          path: result
          private: true
          method: post
          cors: true
          documentation:
            summary: uploads a new data processing result.

    #defines to which topic we want to connect
    environment:
      resultTable: ${self:custom.resultTable}


  #creates a new tracking record in the system
  trackingCreate:
    handler: stasis/tracking/create.create
    events:
      - http:
          path: tracking
          private: true
          method: post
          cors: true
          documentation:
            summary: creates a new tracking record in the database for the given sample

  # creates a tracking update
  # whenever a sample status got pushed
  tracking_status_update:
    handler: stasis/jobs/sync.do_sync
    events:
      - sqs:
          arn:
            Fn::Join:
              - ':'
              - - arn
                - aws
                - sqs
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.syncQueue}
    timeout: 30

  #fetches an existing tracking record from the system
  trackingGet:
    handler: stasis/tracking/get.get
    events:
      - http:
          path: tracking/{sample}
          private: true
          method: get
          cors: true
          documentation:
            summary: loads the tracking information for this sample
          request:
            parameter:
              paths:
                sample: true


  #fetches an existing tracking record from the system
  trackingDelete:
    handler: stasis/tracking/delete.delete
    events:
      - http:
          path: tracking/{sample}
          private: true
          method: delete
          cors: true
          documentation:
            summary: deletes the tracking information for the given sample
          request:
            parameter:
              paths:
                sample: true

  #fetches a list of samples in an experiment
  trackingExperiment:
    handler: stasis/experiment/experiment.get
    events:
      - http:
          path: experiment/{experiment}
          method: get
          private: true
          cors: true
          documentation:
            summary: loads the complete experiment definition and this can time out for large experiments. we recommend to use the paginated approaches
          request:
            parameter:
              path:
                experiment: true
      - http:
          path: experiment/{experiment}/{psize}
          method: get
          cors: true
          private: true
          documentation:
            summary: fetches an experiment in paginated mode in the given page size
          request:
            parameter:
              path:
                experiment: true
                psize: true
      - http:
          path: experiment/{experiment}/{psize}/{lastSample}
          method: get
          cors: true
          private: true
          documentation:
            summary: iterative way to load an experiment definition. Based on the page size and the last fetched sample
          request:
            parameter:
              path:
                experiment: true
                psize: true
                lastSample: true


  #fetches an acquisition record
  acquisitionGet:
    handler: stasis/acquisition/get.get
    events:
      - http:
          path: acquisition/{sample}
          method: get
          cors: true
          private: true
          request:
            parameter:
              paths:
                sample: true
          documentation:
            summary: fetches the acquisition information for the given sample

  #fetches an acquisition record
  acquisitionCreate:
    handler: stasis/acquisition/create.create
    events:
      - http:
          path: acquisition
          method: post
          private: true
          cors: true
          documentation:
            summary: creates a new record with the given acquisition information


  #imports data from MiniX
  acquisitionCreateFromMinix:
    handler: stasis/acquisition/create.fromMinix
    events:
      - http:
          path: acquisition/import/minix
          private: true
          method: post
          cors: true
          documentation:
            summary: this generates an acquisition table based on past minix study data and should be avoided!

  #schedule data to stasis, for handling the processing on the backend
  schedule:
    handler: stasis/schedule/schedule.schedule
    events:
      - http:
          path: schedule
          method: post
          private: true
          cors: true
          documentation:
            summary: schedules a new processing tasks to the queue


  # fetches the list of tracking statuses
  statusGet:
    handler: stasis/status/get.get
    events:
      - http:
          path: status
          method: get
          private: true
          cors: true
          documentation:
            summary: returns all possible status names and their priority

  #checks existence of a raw data file
  fileExists:
    handler: stasis/file/exists.exists
    events:
      - http:
          private: true
          path: file/{sample}
          method: head
          cors: true
          request:
            parameter:
              paths:
                sample: true
          documentation:
            summary: evaluates if a certain file exists

    environment:
      dataBucket: ${self:custom.dataRawBucketName}

  jobResultExits:
    handler: stasis/jobs/result.exist
    events:
      - http:
          private: true
          path: job/result/{job}
          method: head
          cors: true
          documentation:
            summary: check if a job result exists
          request:
            parameter:
              paths:
                job: true
    #defines to which topic we want to connect
    environment:
      dataBucket: ${self:custom.dataZipBucketName}

  #creates a new tracking record in the system
  job_tracking_create:
    handler: stasis/jobs/tracking.create
    events:
      - http:
          path: job/tracking
          private: true
          method: post
          cors: true
          documentation:
            summary: updates the tracking status of a sample with the associated job

  #fetches an existing tracking record from the system
  job_tracking_get:
    handler: stasis/jobs/tracking.get
    events:
      - http:
          documentation:
            summary: Returns the tacking status of a sample with an associated job
            queryParams:
              - name: job
                description: the job id
                required: true
              - name: sample
                description: the sample id
                required: true

          path: job/tracking/{job}/{sample}
          private: true
          method: get
          cors: true
          request:
            parameter:
              paths:
                job: true
                sample: true

  # computes the current state of the given job
  job_tracking_status:
    handler: stasis/jobs/tracking.status
    events:
      - http:
          path: job/status/{job}
          private: true
          method: get
          cors: true
          request:
            parameter:
              paths:
                job: true
          documentation:
            summary: returns the overal status of the given job
            queryParams:
              - name: job
                description: the job id
                required: true
      - http:
          path: job/status/{job}
          private: true
          method: get
          cors: true
          request:
            parameter:
              paths:
                job: true
          documentation:
            summary: returns the overal status of the given job
            queryParams:
              - name: job
                description: the job id
                required: true

    #defines to which topic we want to connect
    environment:
      trackingTable: ${self:custom.trackingTable}
      jobStateTable: ${self:custom.jobStateTable}
      jobTrackingTable: ${self:custom.jobTrackingTable}
  # computes the complete job
  job_description:
    handler: stasis/jobs/tracking.description
    events:
      - http:
          path: job/{job}
          private: true
          method: get
          cors: true
          request:
            parameter:
              paths:
                job: true
          documentation:
            summary: return the complete job description with all associated samples and there states
            queryParams:
              - name: job
                description: the job id
                required: true

    #defines to which topic we want to connect
    environment:
      trackingTable: ${self:custom.trackingTable}
      jobStateTable: ${self:custom.jobStateTable}
      jobTrackingTable: ${self:custom.jobTrackingTable}

  #schedule data to for handling the processing and aggregation on the backend
  job_store:
    handler: stasis/jobs/schedule.store_job
    events:
      - http:
          path: job/store
          method: post
          private: true
          cors: true
          documentation:
            summary: schedules a job to be computed to the backend queue

    #defines to which topic we want to connect
    environment:

      ##
      # contains scheduling events
      schedule_queue: ${self:custom.scheduleQueue}

      ##
      # contains aggregation events
      aggregation_queue: ${self:custom.aggregationQueue}
      jobStateTable: ${self:custom.jobStateTable}
      jobTrackingTable: ${self:custom.jobTrackingTable}
      trackingTable: ${self:custom.trackingTable}
      acquisitionTable: ${self:custom.acquisitionTable}
    #schedule data to for handling the processing and aggregation on the backend
  job_schedule:
    handler: stasis/jobs/schedule.schedule_job
    events:
      - http:
          path: job/schedule/{job}
          method: put
          private: true
          cors: true
          documentation:
            summary: schedules a job to be computed to the backend queue

          request:
            parameter:
              paths:
                job: true
    #defines to which topic we want to connect
    environment:

      ##
      # contains scheduling events
      schedule_queue: ${self:custom.scheduleQueue}

      ##
      # contains aggregation events
      aggregation_queue: ${self:custom.aggregationQueue}
      jobStateTable: ${self:custom.jobStateTable}
      jobTrackingTable: ${self:custom.jobTrackingTable}
      trackingTable: ${self:custom.trackingTable}
      acquisitionTable: ${self:custom.acquisitionTable}

  job_result:
    handler: stasis/jobs/result.get
    events:
      - http:
          path: job/result/{job}
          method: get
          private: true
          cors: true
          documentation:
            summary: downloads a finsihed job from the system

          request:
            parameter:
              paths:
                job: true
    #defines to which topic we want to connect
    environment:
      ##
      # contains scheduling events
      schedule_queue: ${self:custom.scheduleQueue}

      ##
      # contains aggregation events
      aggregation_queue: ${self:custom.aggregationQueue}
      jobStateTable: ${self:custom.jobStateTable}
      jobTrackingTable: ${self:custom.jobTrackingTable}
      dataBucket: ${self:custom.dataZipBucketName}
      trackingTable: ${self:custom.trackingTable}
      acquisitionTable: ${self:custom.acquisitionTable}

  zip_bucket:
    handler: stasis/bucket/bucket.bucket_zip
    events:
      - http:
          private: true
          path: data/zip
          method: get
          cors: true
          documentation:
            summary: returns the name of the bucket for zipped aggregated data

    environment:
      dataBucket: ${self:custom.dataZipBucketName}

  json_bucket:
    handler: stasis/bucket/bucket.bucket_json
    events:
      - http:
          private: true
          path: data/json
          method: get
          cors: true
          documentation:
            summary: returns the name of the bucket for json result data

    environment:
      dataBucket: ${self:custom.dataJSONBucketName}

  raw_bucket:
    handler: stasis/bucket/bucket.bucket_raw
    events:
      - http:
          private: true
          path: data/raw
          method: get
          cors: true
          documentation:
            summary: returns the name of the bucket for all raw data

    environment:
      dataBucket: ${self:custom.dataRawBucketName}

  zip_bucket_triggers:
    handler: stasis/bucket/triggers.bucket_zip
    events:
      - s3:
          bucket: ${self:custom.dataZipBucketName}
          events:
            - s3:ObjectCreated:*

          existing: true
          documentation:
            summary: triggers the function, when an object was uploaded to this. This basically is used to keep jobs in sync

    environment:
      dataBucket: ${self:custom.dataZipBucketName}


  json_bucket_triggers:
    events:
      - s3:
          bucket: ${self:custom.dataJSONBucketName}
          events:
            - s3:ObjectCreated:*
          existing: true
          documentation:
            summary: triggers the function, when an objectwas created to speed up synchronization

    handler: stasis/bucket/triggers.bucket_json

    timeout: 900
    environment:
      dataBucket: ${self:custom.dataJSONBucketName}


resources:
  Resources:
    MyQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "StasisSyncQueue-${self:custom.stage}"
