service: similarity

# using 1.83.3
frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-domain-manager
  - serverless-python-requirements
  - serverless-aws-documentation

provider:
  name: aws
  runtime: python3.8
  region: us-west-2

  # simple security based on stages and api keys
  # one fits all for production
  apiKeys:
    - "similarity-${self:custom.stage}"

  tracing:
    lambda: true
    apiGateway: true

  #required permissions
  iamRoleStatements:
    - Effect: Allow
      Action:
        - iam:PassRole
      Resource: "*"

  memorySize: 128
  timeout: 30
  versionFunctions: false

  logRetentionInDays: 3

  #where to store out data, needs to be manually created!
  deploymentBucket:
    name: "lambdas-similarity"

  ##
  # defines all generated environment variables for lambdas
  environment:
    current_stage: ${self:custom.stage}


############################################################################################
#custom configuration settings
############################################################################################
custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}

  ###
  # custom domain management
  ###

  domains:
    prod: api.metabolomics.us
    test: test-api.metabolomics.us
    dev: dev-api.metabolomics.us
    splashone: splashone.metabolomics.us

  customDomain:
    basePath: "similarity"
    domainName: ${self:custom.domains.${self:custom.stage}}
    stage: "${self:custom.stage}"
    createRoute53Record: true

  pythonRequirements:
    dockerizePip: true
    slim: false
    noDeploy:
      - "pytest"

  ###
  # documentation
  ###
  documentation:
    api:
      info:
        version: '1.0'
        title: Similarity Server API
        description: <h2>Similarity algorithms as lambdas</h2>
#        termsOfService: AsIs
        contact:
          name: Fiehnlab IT Team
          url: https://fiehnlab.ucdavis.edu/staff#it
        license:
          name: CDDL-1.0
          url: https://opensource.org/licenses/CDDL-1.0
    models:
      - name: SimilarityReult
        description: "similarity result object"
        contentType: "application/json"
        schema:
          type: object
          properties:
            algorithm:
              type: string
            similarity:
              type: number
            removePrecursor:
              type: boolean
      - name: SimilarityResultList
        description: "list similarity results"
        contentType: "application/json"
        schema:
          type: array
          items:
            $ref: "{{model: SimilarityResult}}"
      - name: EmptyBody204
        contentType: "application/json"
        schema:
          type: object
          properties:
            statusCode:
              type: integer
              default: 204
            body:
              type: string
      - name: EmptyBody400
        contentType: "application/json"
        schema:
          type: object
          properties:
            statusCode:
              type: integer
              default: 400
      - name: Forbidden403
        contentType: "application/json"
        schema:
          type: object
          properties:
            statusCode:
              type: integer
              default: 403
            body:
              type: object
              properties:
                message:
                  type: string
      - name: EmptyBody404
        contentType: "application/json"
        schema:
          type: object
          properties:
            statusCode:
              type: integer
      #              default: 404
      #            body:
      #              type: string
      - name: ServerError500
        contentType: "application/json"
        schema:
          type: object
          properties:
            statusCode:
              type: integer
              default: 500
            body:
              type: object
              properties:
                error:
                  type: string
      - name: Splash
        contentType: "application/json"
        schema:
          type: string
          pattern: "^splash\\d{2}-[0-9a-z]{4}-[0-9a-z]{10}-[0-9a-z]{20}$"
      - name: Spectrum
        description: Spectrum string definition
        contentType: "application/json"
        schema:
          type: string


  commonModelSchemaFragments:
    parameters:
      SplashPathParam:
        name: splash
        in: path
        required: true
        description: splash key
        schema:
          $ref: "{{model: Splash}}"
      RemovePrecursorQueryParam:
        name: removePrecursor
        in: query
        required: true
        description: remove the precursor and later peaks
        schema:
          type: boolean
          default: false

    responses:
      MethodResponse204:
        statusCode: '204'
        responseModels:
          "application/json": EmptyBody204
      MethodResponse400:
        statusCode: '400'
        responseModels:
          "application/json": EmptyBody400
      MethodResponse403:
        statusCode: '403'
        responseModels:
          "application/json": Forbidden403
      MethodResponse404:
        statusCode: '404'
        responseModels:
          "application/json": EmptyBody404
      MethodResponse500:
        statusCode: '500'
        responseModels:
          "application/json": ServerError500



############################################################################################
# this section defines what to include and exclude when packaging artifacts
############################################################################################
package:
  exclude:
    - .git/**
    - .venv/**
    - .idea/**
    - .pytest_cache/**
    - venv/**
    - test/**
    - tests/**
    - node_modules/**
    - integrationTests/**


functions:
  allsimilarities:
    handler:
    events:
      - http:
          path: libraries
          method: get
          cors: true
          documentation:
            summary: "returns all the libraries in the system"
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.LibraryListResponse}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}

  libraryExist:
    handler: cis/libraries.exists
    events:
      - http:
          private: true
          path: libraries/{library}
          method: head
          cors: true
          documentation:
            summary: "returns if the given library exist"
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParams:
              - ${self:custom.commonModelSchemaFragments.parameters.LibraryPathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
              - statusCode: '200'
          request:
            parameter:
              paths:
                library: true

  librarySize:
    handler: cis/libraries.size
    events:
      - http:
          private: true
          path: libraries/{library}
          method: get
          cors: true
          documentation:
            summary: "returns the count in compounds of a library by type"
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParams:
              - ${self:custom.commonModelSchemaFragments.parameters.LibraryPathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.LibrarySizeResponse}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
          request:
            parameter:
              paths:
                library: true

  librariesDelete:
    handler: cis/libraries.delete
    events:
      - http:
          private: true
          path: libraries/{library}
          method: delete
          cors: true
          documentation:
            summary: "delete the given library"
          request:
            parameter:
              paths:
                library: true

  compoundsOld:
    handler: cis/compounds.all
    events:
      - http:
          private: true
          path: oldcompounds/{library}/{limit}/{offset}
          method: get
          cors: true
          documentation:
            summary: returns all the compounds of the given library
          request:
            parameter:
              paths:
                library: true
                limit: true
                offset: true

      - http:
          private: true
          path: oldcompounds/{library}/{limit}/{offset}/{type}
          method: get
          cors: true
          documentation:
            summary: returns all the compounds of the given library and type
          request:
            parameter:
              paths:
                library: true
                limit: true
                offset: true
                type: true

  compounds:
    handler: cis/compounds.get_sorted
    events:
      - http:
          private: true
          path: compounds/{library}
          method: get
          cors: true
          documentation:
            summary: "returns the splash for all the confirmed compounds of the given library sorted by 'order_by' and limited to 'limit' starting at 'offset'"
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            queryParams:
              - ${self:custom.commonModelSchemaFragments.parameters.LimitQueryParam}
              - ${self:custom.commonModelSchemaFragments.parameters.OffsetQueryParam}
              - ${self:custom.commonModelSchemaFragments.parameters.OrderByQueryParam}
              - ${self:custom.commonModelSchemaFragments.parameters.DirectionQueryParam}
              - ${self:custom.commonModelSchemaFragments.parameters.NameQueryParam}
              - ${self:custom.commonModelSchemaFragments.parameters.RIValueQueryParam}
              - ${self:custom.commonModelSchemaFragments.parameters.RIAccuracyQueryParam}
              - ${self:custom.commonModelSchemaFragments.parameters.PMZValueQueryParam}
              - ${self:custom.commonModelSchemaFragments.parameters.PMZAccuracyQueryParam}
              - ${self:custom.commonModelSchemaFragments.parameters.IdentifiedQueryParam}
            pathParams:
              - ${self:custom.commonModelSchemaFragments.parameters.LibraryPathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.SplashListResponse}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
          request:
            parameter:
              paths:
                library: true
              querystrings:
                order_by: false
                direction: false
                name: false
                limit: false
                offset: false
                rivalue: false
                riaccuracy: false
                pmzvalue: false
                pmzaccuracy: false
                identified: false
      - http:
          private: true
          path: compounds/{library}/{tgt_type}
          method: get
          cors: true
          documentation:
            summary: returns the splash for all the compounds of the given library and tgt_type sorted by 'order_by' and limited to 'limit' starting at 'offset'
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            queryParams:
              - ${self:custom.commonModelSchemaFragments.parameters.LimitQueryParam}
              - ${self:custom.commonModelSchemaFragments.parameters.OffsetQueryParam}
              - ${self:custom.commonModelSchemaFragments.parameters.OrderByQueryParam}
              - ${self:custom.commonModelSchemaFragments.parameters.DirectionQueryParam}
              - ${self:custom.commonModelSchemaFragments.parameters.NameQueryParam}
              - ${self:custom.commonModelSchemaFragments.parameters.RIValueQueryParam}
              - ${self:custom.commonModelSchemaFragments.parameters.RIAccuracyQueryParam}
              - ${self:custom.commonModelSchemaFragments.parameters.PMZValueQueryParam}
              - ${self:custom.commonModelSchemaFragments.parameters.PMZAccuracyQueryParam}
              - ${self:custom.commonModelSchemaFragments.parameters.IdentifiedQueryParam}
            pathParams:
              - ${self:custom.commonModelSchemaFragments.parameters.LibraryPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.TypePathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.SplashListResponse}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
          request:
            parameter:
              paths:
                library: true
                tgt_type: true
              querystrings:
                limit: false
                offset: false
                order_by: false
                direction: false
                name: false
                rivalue: false
                riaccuracy: false
                pmzvalue: false
                pmzaccuracy: false
                identified: false

  compoundSetName:
    handler: cis/compounds.register_name
    events:
      - http:
          private: true
          path: compound/identify/{library}/{splash}/{identifiedBy}/{name}
          method: post
          cors: true
          documentation:
            summary: returns if the given compound exists in the given library
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParameters:
              - ${self:custom.commonModelSchemaFragments.parameters.LibraryPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.SplashPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.UserPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.NamePathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.NameRegistrationResponse}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
          request:
            parameter:
              paths:
                library: true
                splash: true
                identifiedBy: true
                name: true

  compoundDeleteName:
    handler: cis/compounds.delete_name
    events:
      - http:
          private: true
          path: compound/identify/{library}/{splash}/{identifiedBy}/{name}
          method: delete
          cors: true
          documentation:
            summary: returns if the delete of the deletion is ok
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParameters:
              - ${self:custom.commonModelSchemaFragments.parameters.LibraryPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.SplashPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.UserPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.NamePathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.NameRegistrationResponse}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
          request:
            parameter:
              paths:
                library: true
                splash: true
                identifiedBy: true
                name: true

  compoundSetAdduct:
    handler: cis/compounds.register_adduct
    events:
      - http:
          private: true
          path: compound/adduct/{library}/{splash}/{identifiedBy}/{name}
          method: post
          cors: true
          documentation:
            summary: returns if the given compound exists in the given library
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParameters:
              - ${self:custom.commonModelSchemaFragments.parameters.LibraryPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.SplashPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.UserPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.NamePathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.NameRegistrationResponse}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
          request:
            parameter:
              paths:
                library: true
                splash: true
                identifiedBy: true
                name: true

  compoundRemoveAdduct:
    handler: cis/compounds.delete_adduct
    events:
      - http:
          private: true
          path: compound/adduct/{library}/{splash}/{identifiedBy}/{name}
          method: delete
          cors: true
          documentation:
            summary: returns if the given compound exists in the given library
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParameters:
              - ${self:custom.commonModelSchemaFragments.parameters.LibraryPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.SplashPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.UserPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.NamePathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.NameRegistrationResponse}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
          request:
            parameter:
              paths:
                library: true
                splash: true
                identifiedBy: true
                name: true

  compoundSetComment:
    handler: cis/compounds.register_comment
    events:
      - http:
          private: true
          path: compound/comment/{library}/{splash}/{identifiedBy}
          method: post
          cors: true
          documentation:
            summary: returns if the given compound exists in the given library
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParameters:
              - ${self:custom.commonModelSchemaFragments.parameters.LibraryPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.SplashPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.UserPathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.NameRegistrationResponse}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
          request:
            parameter:
              paths:
                library: true
                splash: true
                identifiedBy: true

  compoundSetMeta:
    handler: cis/compounds.register_meta
    events:
      - http:
          private: true
          path: compound/meta/{library}/{splash}/{identifiedBy}/{name}/{value}
          method: post
          cors: true
          documentation:
            summary: returns if the given compound exists in the given library
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParameters:
              - ${self:custom.commonModelSchemaFragments.parameters.LibraryPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.SplashPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.UserPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.NamePathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.ValuePathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.NameRegistrationResponse}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
          request:
            parameter:
              paths:
                library: true
                splash: true
                identifiedBy: true
                name: true
                value: true

  compoundDeleteMeta:
    handler: cis/compounds.delete_meta
    events:
      - http:
          private: true
          path: compound/meta/{library}/{splash}/{identifiedBy}/{name}/{value}
          method: post
          cors: true
          documentation:
            summary: returns if the given compound exists in the given library
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParameters:
              - ${self:custom.commonModelSchemaFragments.parameters.LibraryPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.SplashPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.UserPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.NamePathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.ValuePathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.NameRegistrationResponse}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
          request:
            parameter:
              paths:
                library: true
                splash: true
                identifiedBy: true
                name: true
                value: true

  compoundGet:
    handler: cis/compounds.get
    events:
      - http:
          private: true
          path: compound/{library}/{splash}
          method: get
          cors: true
          documentation:
            summary: returns if the given compound exists in the given library
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParameters:
              - ${self:custom.commonModelSchemaFragments.parameters.LibraryPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.SplashPathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.CompoundResponse}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
          request:
            parameter:
              paths:
                library: true
                splash: true

  compoundGetMembers:
    handler: cis/compounds.get_members
    events:
      - http:
          private: true
          path: compound/members/{library}/{splash}/{limit}/{offset}
          method: get
          cors: true
          documentation:
            summary: returns the members of the given compounds
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParameters:
              - ${self:custom.commonModelSchemaFragments.parameters.LibraryPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.SplashPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.LimitPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.OffsetPathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.SplashListResponse}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
          request:
            parameter:
              paths:
                library: true
                splash: true
                limit: true
                offset: true

  compoundHasMembers:
    handler: cis/compounds.has_members
    events:
      - http:
          private: true
          path: compound/members/{library}/{splash}
          method: head
          cors: true
          documentation:
            summary: returns if the given compound has any associated splashes in this library
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParameters:
              - ${self:custom.commonModelSchemaFragments.parameters.LibraryPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.SplashPathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.NameRegistrationResponse}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
          request:
            parameter:
              paths:
                library: true
                splash: true

  compoundExist:
    handler: cis/compounds.exists
    events:
      - http:
          private: true
          path: compound/{library}/{splash}
          method: head
          cors: true
          documentation:
            summary: returns if the given compound exists in the given library
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParameters:
              - ${self:custom.commonModelSchemaFragments.parameters.LibraryPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.SplashPathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.CompoundExistsResponse}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
          request:
            parameter:
              paths:
                library: true
                splash: true

  compoundMakeNamePrimary:
    handler: cis/compounds.make_name_primary
    events:
      - http:
          private: true
          path: compound/{library}/{splash}/{name}
          method: put
          cors: true
          documentation:
            summary: updates the primary name of a compound
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParameters:
              - ${self:custom.commonModelSchemaFragments.parameters.LibraryPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.SplashPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.NamePathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.NameRegistrationResponse}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
          request:
            parameter:
              paths:
                library: true
                splash: true
                name: true

  compoundDelete:
    handler: cis/compounds.delete
    events:
      - http:
          private: true
          path: compound/{library}/{splash}
          method: delete
          cors: true
          documentation:
            summary: delete the given bin from the given library
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParameters:
              - ${self:custom.commonModelSchemaFragments.parameters.LibraryPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.SplashPathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
          request:
            parameter:
              paths:
                library: true
                splash: true

  configProfile:
    handler: cis/configurations.profiles
    events:
      - http:
          private: true
          path: profiles/{method}/{value}
          method: get
          cors: true
          documentation:
            summary: returns the list of profiles used to process the object defined in method, either 'target' or 'sample'
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParameters:
              - ${self:custom.commonModelSchemaFragments.parameters.ObjectPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.VaaluePathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.ProfileListResponse}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
          request:
            parameter:
              paths:
                method: true
                value: true

  configConfiguration:
    handler: cis/configurations.configs
    events:
      - http:
          private: true
          path: configurations/{method}/{value}
          method: get
          cors: true
          documentation:
            summary: returns the list of configurations used to process the object defined in method, either 'target' or 'sample'
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParameters:
              - ${self:custom.commonModelSchemaFragments.parameters.ObjectPathParam}
              - ${self:custom.commonModelSchemaFragments.parameters.ValuePathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.ConfigListResponse}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
          request:
            parameter:
              paths:
                method: true
                value: true

  annotations:
    handler: cis/annotations.get_all
    events:
      - http:
          private: true
          path: annotations/{splash}
          method: get
          cors: true
          documentation:
            summary: returns a paged list and the total number of annotations for the given compound
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            queryParams:
              - name: "limit"
                description: "number of items in the result. Default: 50"
              - name: "offset"
                description: "index of the first row to put in the result"
            pathParams:
            pathParameters:
              - ${self:custom.commonModelSchemaFragments.parameters.SplashPathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.AnnotationsResponse}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
          request:
            parameter:
              paths:
                splash: true
              querystrings:
                limit: false
                offset: false

  spectrumGetStatus:
    handler: cis/spectrum.get_status
    events:
      - http:
          private: true
          path: spectrum/{tgt_id}
          method: get
          cors: true
          documentation:
            summary: Returns the status of a spectrum as being Clean or Dirty (True or False)
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParameters:
              - ${self:custom.commonModelSchemaFragments.parameters.TypePathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.StatusResponse}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
          request:
            parameter:
              paths:
                tgt_id: true
              querystrings:
                identifiedBy: true

  spectrumMarkStatus:
    handler: cis/spectrum.register_status
    events:
      - http:
          private: true
          path: spectrum/{tgt_id}
          method: post
          cors: true
          documentation:
            summary: Marks a spectrum as being Clean or Dirty (True or False) for a user
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParameters:
              - ${self:custom.commonModelSchemaFragments.parameters.TypePathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.StatusResponse}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
          request:
            parameter:
              paths:
                tgt_id: true
              querystrings:
                clean: true
                identifiedBy: true

  spectrumDeleteStatus:
    handler: cis/spectrum.delete_status
    events:
      - http:
          private: true
          path: spectrum/{tgt_id}
          method: delete
          cors: true
          documentation:
            summary: Deletes the spectrum's Clean or Dirty flag for a user
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            pathParameters:
              - ${self:custom.commonModelSchemaFragments.parameters.TypePathParam}
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse204}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
          request:
            parameter:
              paths:
                tgt_id: true
              querystrings:
                identifiedBy: true
