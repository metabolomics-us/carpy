service: similarity

# using 1.83.3
frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-domain-manager
  - serverless-python-requirements
  - serverless-aws-documentation

provider:
  name: aws
  runtime: python3.8
  region: us-west-2

  # simple security based on stages and api keys
  # one fits all for production
  apiKeys:
    - "similarity-${self:custom.stage}"

  tracing:
    lambda: true
    apiGateway: true

  #required permissions
  iamRoleStatements:
    - Effect: Allow
      Action:
        - iam:PassRole
      Resource: "*"

  memorySize: 128
  timeout: 30
  versionFunctions: false

  logRetentionInDays: 3

  #where to store out data, needs to be manually created!
  deploymentBucket:
    name: "lambdas-similarity"

  ##
  # defines all generated environment variables for lambdas
  environment:
    current_stage: ${self:custom.stage}


############################################################################################
#custom configuration settings
############################################################################################
custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}

  ###
  # custom domain management
  ###

  domains:
    prod: api.metabolomics.us
    test: test-api.metabolomics.us
    dev: dev-api.metabolomics.us
    splashone: splashone.metabolomics.us

  customDomain:
    basePath: "similarity"
    domainName: ${self:custom.domains.${self:custom.stage}}
    stage: "${self:custom.stage}"
    createRoute53Record: true

  pythonRequirements:
    dockerizePip: true
    slim: false
    noDeploy:
      - "pytest"

  ###
  # documentation
  ###
  documentation:
    api:
      info:
        version: '1.0'
        title: Similarity Server API
        description: <h2>Similarity algorithms as lambdas</h2>
#        termsOfService: AsIs
        contact:
          name: Fiehnlab IT Team
          url: https://fiehnlab.ucdavis.edu/staff#it
        license:
          name: CDDL-1.0
          url: https://opensource.org/licenses/CDDL-1.0
    models:
      - name: SimilarityResult
        description: similarity result object
        contentType: "application/json"
        schema:
          type: object
          properties:
            algorithm:
              type: string
            similarity:
              type: number
            removePrecursor:
              type: boolean
      - name: SimilarityResultList
        description: list of similarity results
        contentType: "application/json"
        schema:
          type: array
          items:
            $ref: {{model: SimilarityResult}}
      - name: EmptyBody204
        contentType: "application/json"
        schema:
          type: object
          properties:
            statusCode:
              type: integer
              default: 204
            body:
              type: string
      - name: EmptyBody400
        contentType: "application/json"
        schema:
          type: object
          properties:
            statusCode:
              type: integer
              default: 400
      - name: Forbidden403
        contentType: "application/json"
        schema:
          type: object
          properties:
            statusCode:
              type: integer
              default: 403
            body:
              type: object
              properties:
                message:
                  type: string
      - name: EmptyBody404
        contentType: "application/json"
        schema:
          type: object
          properties:
            statusCode:
              type: integer
                default: 404
                body:
                  type: string
      - name: ServerError500
        contentType: "application/json"
        schema:
          type: object
          properties:
            statusCode:
              type: integer
              default: 500
            body:
              type: object
              properties:
                error:
                  type: string
      - name: Splash
        contentType: "application/json"
        schema:
          type: string
          pattern: "^splash\\d{2}-[0-9a-z]{4}-[0-9a-z]{10}-[0-9a-z]{20}$"
      - name: Spectrum
        description: Spectrum string definition
        contentType: "application/json"
        schema:
          type: string
      - name: AlgorithmList
        description: List of algorythms
        contentType: "application/json"
        schema:
          type: array
          items:
            $ref: {{model: Algorithm}}
      - name: Algorithm
        description: Algorithm definition
        contentType: "application/json"
        schema:
          type: object
          patternProperties:
            "^.*$":
              type: string


  commonModelSchemaFragments:
    parameters:
      SplashPathParam:
        name: splash
        in: path
        required: true
        description: splash key
        schema:
          $ref: "{{model: Splash}}"
      RemovePrecursorQueryParam:
        name: removePrecursor
        in: query
        required: true
        description: remove the precursor and later peaks
        schema:
          type: boolean
          default: false

    responses:
      MethodResponse204:
        statusCode: '204'
        responseModels:
          "application/json": EmptyBody204
      MethodResponse400:
        statusCode: '400'
        responseModels:
          "application/json": EmptyBody400
      MethodResponse403:
        statusCode: '403'
        responseModels:
          "application/json": Forbidden403
      MethodResponse404:
        statusCode: '404'
        responseModels:
          "application/json": EmptyBody404
      MethodResponse500:
        statusCode: '500'
        responseModels:
          "application/json": ServerError500
      AlgorythmListResponse:
        statusCode: '200'
        responseModels:
          "application/json": AlgorithmList
      AllSimilaritiesResponse:
        statusCode: '200'
        responseModels:
          "application/json": SimilarityResultList
      SimilarityResponse:
        statusCode: '200'
        responseModels:
          "application/json": SimilarityResult



############################################################################################
# this section defines what to include and exclude when packaging artifacts
############################################################################################
package:
  exclude:
    - .git/**
    - .venv/**
    - .idea/**
    - .pytest_cache/**
    - venv/**
    - test/**
    - tests/**
    - node_modules/**
    - integrationTests/**


functions:
  algorithms:
    handler: similarity/similarity.list_algorithms
    events:
      - http:
          path: algorithms
          method: get
          cors: true
          documentation:
            summary: "returns the list of similarity algorithms in the system"
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.AlgorithmListResponse}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}

  allsimilarities:
    handler:
    events:
      - http:
          path: allsimilarities
          method: post
          cors: true
          request:
            parameter:
              query:
                remove_precursor: false
                ms2_tolerance: false
          documentation:
            summary: "calculates similarities with all algorithms for the given spectra"
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            requestModles:
              - name: unknown
                description: unknown spectrum
                schema:
                  $ref: {{model: Spectrum}}
              - name: reference
                description: reference spectrum
                schema:
                  $ref: {{model: Spectrum}}
            queryStringParams:
              - name: remove_precursor
                in: query
                required: false
                description: flag to signal precursor peak removal
                schema:
                  type: boolean
              - name: ms2_tolerance
                in: query
                required: false
                description: mass tolerance for peak centroiding in Dalton. (default=0.005)
                schema:
                  type: number
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.AllSimilaritiesResponse}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}

  similarity:
    handler: similarity/similarity.similarity
    events:
      - http:
          path: similarity/{algorithm}
          method: get
          cors: true
          request:
            parameter:
              path:
                algorithm: true
              query:
                remove_precursor: false
                ms2_tolerance: false
          documentation:
            summary: "returns if the given library exist"
            requestHeaders:
              - name: "x-api-key"
                description: "AWS generated api key for the respective stage"
            requestModles:
              - name: unknown
                description: unknown spectrum
                schema:
                  $ref: {{model: Spectrum}}
              - name: reference
                description: reference spectrum
                schema:
                  $ref: {{model: Spectrum}}
            pathParams:
              - name: algorithm
                in: path
                required: true
                description: name of the algorithm to use
                schema:
                  type: string
            queryStringParams:
              - name: remove_precursor
                in: query
                required: false
                description: flag to signal precursor peak removal
                schema:
                  type: boolean
              - name: ms2_tolerance
                in: query
                required: false
                description: mass tolerance for peak centroiding in Dalton. (default=0.005)
                schema:
                  type: number
            methodResponses:
              - ${self:custom.commonModelSchemaFragments.responses.SimilarityResponse}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse403}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse404}
              - ${self:custom.commonModelSchemaFragments.responses.MethodResponse500}
